# This file has been generated by gen_aircraft from /home/bart/paparazzi/conf/airframes/TUDELFT/tudelft_course2017_bebop1_avoider.xml by /home/bart/paparazzi/sw/tools/generators/gen_aircraft.out
# Version v5.11_devel-none-gbfcf671
# Please DO NOT EDIT
AC_ID=42

####################################################
# makefile firmware 'rotorcraft'
####################################################

###########
# -target: 'ap'
ifeq ($(TARGET), ap)

# include modules directory for all targets
$(TARGET).CFLAGS += -Imodules -Iarch/$(ARCH)/modules
ACTUATORS_DIR = modules/actuators
AHRS_DIR = modules/ahrs
AIR_DATA_DIR = modules/air_data
CALIBRATION_DIR = modules/calibration
COMPUTER_VISION_DIR = modules/computer_vision
DATALINK_DIR = modules/datalink
GEO_MAG_DIR = modules/geo_mag
GPS_DIR = modules/gps
GREEN_KEEPER_DIR = modules/green_keeper
GUIDANCE_DIR = modules/guidance
IMU_DIR = modules/imu
INS_DIR = modules/ins
LOGGERS_DIR = modules/loggers
NAV_DIR = modules/nav
RADIO_CONTROL_DIR = modules/radio_control
SONAR_DIR = modules/sonar
STABILIZATION_DIR = modules/stabilization

USE_MAGNETOMETER = FALSE
VIEWVIDEO_HOST = 192.168.42.48
VIEWVIDEO_BROADCAST = FALSE
USE_MAGNETOMETER = FALSE

include $(PAPARAZZI_SRC)/conf/boards/bebop.makefile
include $(PAPARAZZI_SRC)/conf/firmwares/rotorcraft.makefile

USE_MAGNETOMETER ?= 1
GPS_LED ?= none
BEBOP_ACTUATORS_I2C_DEV ?= i2c1
BEBOP_ACTUATORS_I2C_DEV_LOWER = $(shell echo $(BEBOP_ACTUATORS_I2C_DEV) | tr A-Z a-z)
BEBOP_ACTUATORS_I2C_DEV_UPPER = $(shell echo $(BEBOP_ACTUATORS_I2C_DEV) | tr a-z A-Z)
RADIO_CONTROL_LED ?= none
RADIO_CONTROL_DATALINK_LED ?= none
MODEM_DEV ?= UDP0
MODEM_DEV_LOWER = $(shell echo $(MODEM_DEV) | tr A-Z a-z)
MODEM_DEV_UPPER = $(shell echo $(MODEM_DEV) | tr a-z A-Z)
MODEM_PORT_OUT ?= 4242
MODEM_PORT_IN ?= 4243
MODEM_BROADCAST ?= TRUE

$(TARGET).CFLAGS += -DMT9F002_GAIN_BLUE=8.0
$(TARGET).CFLAGS += -DMT9F002_GAIN_RED=8.0
$(TARGET).CFLAGS += -DMT9F002_GAIN_GREEN2=8.0
$(TARGET).CFLAGS += -DMT9F002_GAIN_GREEN1=8.0
$(TARGET).CFLAGS += -DMT9F002_TARGET_EXPOSURE=4
$(TARGET).CFLAGS += -DMT9F002_TARGET_FPS=30
$(TARGET).CFLAGS += -DMT9F002_OUTPUT_HEIGHT=520
$(TARGET).CFLAGS += -DMT9F002_OUTPUT_WIDTH=240
$(TARGET).CFLAGS += -DMT9F002_SENSOR_HEIGHT=2*1040
$(TARGET).CFLAGS += -DMT9F002_SENSOR_WIDTH=2*480
$(TARGET).CFLAGS += -DMT9F002_INITIAL_OFFSET_Y=1680-1040
$(TARGET).CFLAGS += -DMT9F002_INITIAL_OFFSET_X=416+2704-480
$(TARGET).CFLAGS += -DH264_ROTATE=TRUE
$(TARGET).CFLAGS += -DVIDEO_THREAD_CAMERA=front_camera

# makefile for module video_rtp_stream in modules/computer_vision
ap.CFLAGS += -DVIEWVIDEO_CAMERA=front_camera
ap.CFLAGS += -DVIEWVIDEO_SHOT_PATH=/data/ftp/internal_000
ap.CFLAGS += -DVIEWVIDEO_FPS=18
ap.CFLAGS += -DVIEWVIDEO_WRITE_VIDEO=FALSE
ap.CFLAGS += -DVIEWVIDEO_VIDEO_FILE=orangeAvoider
ap.CFLAGS += -DVIEWVIDEO_STREAM_VIDEO=TRUE
ap.srcs += $(COMPUTER_VISION_DIR)/viewvideo.c
ap.CFLAGS += -Imodules/computer_vision
ap.CFLAGS += -Imodules/computer_vision/lib/encoding
ap.srcs += modules/computer_vision/lib/encoding/rtp.c
ap.srcs += modules/computer_vision/lib/encoding/P7_H264.c
      include $(CFG_SHARED)/udp.makefile
      VIEWVIDEO_HOST        ?= $(MODEM_HOST)
      VIEWVIDEO_PORT_OUT    ?= 5000
      VIEWVIDEO_PORT2_OUT   ?= 6000
      VIEWVIDEO_BROADCAST   ?= FALSE
      VIEWVIDEO_USE_NETCAT  ?= FALSE
      VIEWVID_CFLAGS  = -DVIEWVIDEO_HOST=$(VIEWVIDEO_HOST) -DVIEWVIDEO_PORT_OUT=$(VIEWVIDEO_PORT_OUT) -DVIEWVIDEO_PORT2_OUT=$(VIEWVIDEO_PORT2_OUT)
      ifneq (,$(findstring $(VIEWVIDEO_USE_NETCAT),0 FALSE))
        ap.CFLAGS += $(VIEWVID_CFLAGS) -DVIEWVIDEO_BROADCAST=$(VIEWVIDEO_BROADCAST)
        nps.CFLAGS += $(VIEWVID_CFLAGS) -DVIEWVIDEO_BROADCAST=FALSE
      else
        $(TARGET).CFLAGS += $(VIEWVID_CFLAGS) -DVIEWVIDEO_USE_NETCAT
      endif
      $(TARGET).LDFLAGS += -Wl,-Bdynamic -Lmodules/computer_vision/lib/encoding -l:libh1enc.so -Wl,-Bstatic

# makefile for module green_keeper in modules/green_keeper
ap.srcs += $(GREEN_KEEPER_DIR)/green_keeper.c

# makefile for module ColorFilter in modules/computer_vision
ap.CFLAGS += -DCOLORFILTER_CAMERA=front_camera
ap.srcs += $(COMPUTER_VISION_DIR)/colorfilter.c

# makefile for module cv_ae_awb in modules/computer_vision
ap.CFLAGS += -DCV_AE_AWB_AV=1
ap.CFLAGS += -DCV_AE_AWB_VERBOSE=0
ap.srcs += $(COMPUTER_VISION_DIR)/cv_ae_awb.c

# makefile for module video_thread in modules/computer_vision
ap.srcs += $(COMPUTER_VISION_DIR)/video_thread.c
ap.srcs += $(COMPUTER_VISION_DIR)/cv.c
ap.CFLAGS += -Imodules/computer_vision
ap.srcs += modules/computer_vision/lib/vision/image.c
ap.srcs += modules/computer_vision/lib/v4l/v4l2.c
ap.srcs += modules/computer_vision/lib/v4l/virt2phys.c
ap.srcs += modules/computer_vision/lib/encoding/jpeg.c
ap.CFLAGS += -D__USE_GNU
ap.LDFLAGS += -lrt
ap.LDFLAGS += -static-libgcc
ap.CFLAGS += -I$(PAPARAZZI_SRC)/sw/ext/libopengles/inc
ap.srcs += modules/computer_vision/lib/opengl/opengl.c
ap.LDFLAGS += -Wl,-Bdynamic -L../ext/libopengles/lib/arm -lGLESv2 -lEGL -Wl,-Bstatic

# makefile for module logger_file in modules/loggers
ap.CFLAGS += -DFILE_LOGGER_PATH=/data/ftp/internal_000
ap.srcs += $(LOGGERS_DIR)/file_logger.c

# makefile for module calibration in modules/calibration
ap.srcs += $(CALIBRATION_DIR)/send_imu_mag_current.c

# makefile for module air_data in modules/air_data
ap.srcs += $(AIR_DATA_DIR)/air_data.c

# makefile for module geo_mag in modules/geo_mag
ap.srcs += $(GEO_MAG_DIR)/geo_mag.c
ap.srcs += math/pprz_geodetic_wmm2015.c

# makefile for module ins in modules/ins
ap.CFLAGS += -DINS_TYPE_H=\"subsystems/ins/ins_int.h\"
ap.srcs += subsystems/ins.c
ap.srcs += subsystems/ins/ins_int.c
ap.srcs += subsystems/ins/vf_extended_float.c
ap.CFLAGS += -DUSE_VFF_EXTENDED

# makefile for module ahrs_int_cmpl_quat in modules/ahrs
ap.CFLAGS += -DAHRS_USE_GPS_HEADING=TRUE
ifeq (,$(findstring $(USE_MAGNETOMETER),0 FALSE))
ap.CFLAGS += -DUSE_MAGNETOMETER
endif
ifneq ($(AHRS_ALIGNER_LED),none)
ap.CFLAGS += -DAHRS_ALIGNER_LED=$(AHRS_ALIGNER_LED)
endif
ap.CFLAGS += -DUSE_AHRS
ap.CFLAGS += -DUSE_AHRS_ALIGNER
ap.srcs += subsystems/ahrs.c
ap.srcs += subsystems/ahrs/ahrs_aligner.c
ap.srcs += subsystems/ahrs/ahrs_int_cmpl_quat.c
ap.srcs += subsystems/ahrs/ahrs_int_cmpl_quat_wrapper.c
ifdef SECONDARY_AHRS
ifneq (,$(findstring $(SECONDARY_AHRS), icq int_cmpl_quat))
# this is the secondary AHRS
$(TARGET).CFLAGS += -DAHRS_SECONDARY_TYPE_H=\"subsystems/ahrs/ahrs_int_cmpl_quat_wrapper.h\"
$(TARGET).CFLAGS += -DSECONDARY_AHRS=ahrs_icq
else
# this is the primary AHRS
$(TARGET).CFLAGS += -DAHRS_TYPE_H=\"subsystems/ahrs/ahrs_int_cmpl_quat_wrapper.h\"
$(TARGET).CFLAGS += -DPRIMARY_AHRS=ahrs_icq
endif
else
# plain old single AHRS usage
$(TARGET).CFLAGS += -DAHRS_TYPE_H=\"subsystems/ahrs/ahrs_int_cmpl_quat_wrapper.h\"
endif

# makefile for module stabilization_rate_indi in modules/stabilization
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_rate_indi.c
ap.CFLAGS += -DUSE_STABILIZATION_RATE
ap.CFLAGS += -DSTABILIZATION_RATE_INDI=true

# makefile for module stabilization_indi in modules/stabilization
ap.CFLAGS += -DINDI_RPM_FEEDBACK=TRUE
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_indi.c
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_attitude_quat_indi.c
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_attitude_quat_transformations.c
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_attitude_rc_setpoint.c
ap.CFLAGS += -DSTABILIZATION_ATTITUDE_TYPE_INT
ap.CFLAGS += -DSTABILIZATION_ATTITUDE_TYPE_H=\"stabilization/stabilization_attitude_quat_indi.h\"
ap.CFLAGS += -DSTABILIZATION_ATTITUDE_INDI_FULL=true

# makefile for module stabilization_rotorcraft in modules/stabilization
ap.srcs += $(SRC_FIRMWARE)/stabilization.c
ap.srcs += $(SRC_FIRMWARE)/stabilization/stabilization_none.c

# makefile for module nav_basic_rotorcraft in modules/nav
ap.srcs += $(SRC_FIRMWARE)/navigation.c
ap.srcs += subsystems/navigation/common_flight_plan.c
ap.srcs += subsystems/navigation/waypoints.c
ap.CFLAGS += -DUSE_NAVIGATION

# makefile for module guidance_rotorcraft in modules/guidance
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_h.c
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_h_ref.c
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_v.c
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_v_ref.c
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_v_adapt.c
ap.srcs += $(SRC_FIRMWARE)/guidance/guidance_flip.c

# makefile for module gps_datalink in modules/gps
ap.srcs += subsystems/gps/gps_datalink.c
      ifdef SECONDARY_GPS
      ifneq (,$(findstring $(SECONDARY_GPS), datalink))
      # this is the secondary GPS
      $(TARGET).CFLAGS += -DGPS_SECONDARY_TYPE_H=\"subsystems/gps/gps_datalink.h\"
      $(TARGET).CFLAGS += -DSECONDARY_GPS=GPS_DATALINK
      else
      $(TARGET).CFLAGS += -DGPS_TYPE_H=\"subsystems/gps/gps_datalink.h\"
      $(TARGET).CFLAGS += -DPRIMARY_GPS=GPS_DATALINK
      endif
      else
      # plain old single GPS usage
      $(TARGET).CFLAGS += -DGPS_TYPE_H=\"subsystems/gps/gps_datalink.h\"
      endif

# makefile for module gps in modules/gps
ap.srcs += subsystems/gps.c
ap.CFLAGS += -DUSE_GPS
ifneq ($(GPS_LED),none)
ap.CFLAGS += -DGPS_LED=$(GPS_LED)
endif

# makefile for module imu_bebop in modules/imu
ap.CFLAGS += -DBEBOP_MAG_I2C_DEV=i2c1
ap.CFLAGS += -DUSE_I2C1
ap.CFLAGS += -DBEBOP_MPU_I2C_DEV=i2c2
ap.CFLAGS += -DUSE_I2C2
ap.CFLAGS += -DIMU_TYPE_H=\"subsystems/imu/imu_bebop.h\"
ap.srcs += peripherals/mpu60x0.c
ap.srcs += peripherals/mpu60x0_i2c.c
ap.srcs += peripherals/ak8963.c
ap.srcs += subsystems/imu/imu_bebop.c

# makefile for module sonar in modules/sonar
ap.srcs += $(SONAR_DIR)/sonar_bebop.c
ap.CFLAGS += -DUSE_SPI0=1
ap.CFLAGS += -DUSE_ADC0=1
      include $(CFG_SHARED)/spi_master.makefile

# makefile for module imu_common in modules/imu
ap.CFLAGS += -DUSE_IMU
ap.srcs += subsystems/imu.c

# makefile for module actuators_bebop in modules/actuators
ap.CFLAGS += -DACTUATORS
ap.CFLAGS += -DBEBOP_ACTUATORS_I2C_DEV=$(BEBOP_ACTUATORS_I2C_DEV_LOWER)
ap.CFLAGS += -DUSE_$(BEBOP_ACTUATORS_I2C_DEV_UPPER)
ap.srcs += $(SRC_BOARD)/actuators.c

# makefile for module radio_control_datalink in modules/radio_control
ifneq ($(RADIO_CONTROL_LED),none)
ap.CFLAGS += -DRADIO_CONTROL_LED=$(RADIO_CONTROL_LED)
endif
ifneq ($(RADIO_CONTROL_DATALINK_LED),none)
ap.CFLAGS += -DRADIO_CONTROL_DATALINK_LED=$(RADIO_CONTROL_DATALINK_LED)
endif
ap.CFLAGS += -DRADIO_CONTROL_TYPE_H=\"subsystems/radio_control/rc_datalink.h\"
ifeq (,$(findstring $(SEPARATE_FBW),1 TRUE))
ap.CFLAGS += -DRADIO_CONTROL
ap.CFLAGS += -DRADIO_CONTROL_TYPE_DATALINK
ap.srcs += subsystems/radio_control.c
ap.srcs += subsystems/radio_control/rc_datalink.c
endif

# makefile for module telemetry_udp in modules/datalink
ap.CFLAGS += -DUSE_$(MODEM_DEV_UPPER)
ap.CFLAGS += -D$(MODEM_DEV_UPPER)_HOST=$(MODEM_HOST)
ap.CFLAGS += -D$(MODEM_DEV_UPPER)_PORT_OUT=$(MODEM_PORT_OUT)
ap.CFLAGS += -D$(MODEM_DEV_UPPER)_PORT_IN=$(MODEM_PORT_IN)
ap.CFLAGS += -D$(MODEM_DEV_UPPER)_BROADCAST=$(MODEM_BROADCAST)
ap.CFLAGS += -DDOWNLINK
ap.CFLAGS += -DPERIODIC_TELEMETRY
ap.CFLAGS += -DDOWNLINK_DEVICE=$(MODEM_DEV_LOWER)
ap.CFLAGS += -DPPRZ_UART=$(MODEM_DEV_LOWER)
ap.CFLAGS += -DDOWNLINK_TRANSPORT=pprz_tp
ap.CFLAGS += -DDATALINK=PPRZ
ap.srcs += $(DATALINK_DIR)/pprz_dl.c
ap.srcs += subsystems/datalink/downlink.c
ap.srcs += subsystems/datalink/datalink.c
ap.srcs += subsystems/datalink/telemetry.c
ap.srcs += pprzlink/src/pprz_transport.c
      include $(CFG_SHARED)/udp.makefile
ap.srcs += $(SRC_FIRMWARE)/rotorcraft_datalink.c
ap.srcs += $(SRC_FIRMWARE)/rotorcraft_telemetry.c

endif # end of target 'ap'

